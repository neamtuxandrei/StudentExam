// <auto-generated />
using System;
using ExamSupportToolAPI.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamSupportToolAPI.DataAccess.Migrations
{
    [DbContext(typeof(ExaminationSessionDbContext))]
    partial class ExaminationSessionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamSupportToolAPI.Domain.CommitteeExaminationSession", b =>
                {
                    b.Property<Guid>("CommitteeMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommitteeMemberId", "ExaminationSessionId");

                    b.HasIndex("ExaminationSessionId");

                    b.ToTable("CommitteeExaminationSessions");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.CommitteeMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.CommitteeMemberGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProjectGrade")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudentPresentationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TheoryGrade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentPresentationId");

                    b.ToTable("CommitteeMemberGrade");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.ExaminationSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HeadOfCommitteeMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PresentationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SecretaryMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PresentationScheduleId")
                        .IsUnique()
                        .HasFilter("[PresentationScheduleId] IS NOT NULL");

                    b.HasIndex("SecretaryMemberId");

                    b.ToTable("ExaminationSessions");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.ExaminationTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Answer3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TicketNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationSessionId");

                    b.ToTable("ExaminationTickets");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.PresentationSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BreakDuration")
                        .HasColumnType("int");

                    b.Property<DateTime>("BreakStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentPresentationDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PresentationSchedules");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.PresentationScheduleEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PresentationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PresentationScheduleId");

                    b.HasIndex("StudentId");

                    b.ToTable("PresentationScheduleEntries");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.SecretaryMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.ToTable("SecretaryMembers");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AnonymizationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoordinatorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrentExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentPresentationScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DiplomaProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("YearsAverageGrade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasFilter("[ExternalId] IS NOT NULL");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.StudentExaminationSession", b =>
                {
                    b.Property<Guid>("ExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExaminationSessionId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentExaminationSessions");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.StudentPresentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExaminationSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ExaminationTicketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAbsent")
                        .HasColumnType("bit");

                    b.Property<decimal>("ProjectGrade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TheoryGrade")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationSessionId");

                    b.HasIndex("ExaminationTicketId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPresentations");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.CommitteeExaminationSession", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.CommitteeMember", null)
                        .WithMany()
                        .HasForeignKey("CommitteeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSupportToolAPI.Domain.ExaminationSession", null)
                        .WithMany()
                        .HasForeignKey("ExaminationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.CommitteeMemberGrade", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.StudentPresentation", null)
                        .WithMany("CommitteeMemberGrades")
                        .HasForeignKey("StudentPresentationId");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.ExaminationSession", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.PresentationSchedule", "PresentationSchedule")
                        .WithOne()
                        .HasForeignKey("ExamSupportToolAPI.Domain.ExaminationSession", "PresentationScheduleId");

                    b.HasOne("ExamSupportToolAPI.Domain.SecretaryMember", null)
                        .WithMany("ExaminationSessions")
                        .HasForeignKey("SecretaryMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PresentationSchedule");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.ExaminationTicket", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.ExaminationSession", null)
                        .WithMany("ExaminationTickets")
                        .HasForeignKey("ExaminationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.PresentationScheduleEntry", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.PresentationSchedule", null)
                        .WithMany("PresentationScheduleEntries")
                        .HasForeignKey("PresentationScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSupportToolAPI.Domain.Student", "Student")
                        .WithMany("PresentationScheduleEntries")
                        .HasForeignKey("StudentId");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.StudentExaminationSession", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.ExaminationSession", null)
                        .WithMany()
                        .HasForeignKey("ExaminationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSupportToolAPI.Domain.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.StudentPresentation", b =>
                {
                    b.HasOne("ExamSupportToolAPI.Domain.ExaminationSession", null)
                        .WithMany("StudentPresentations")
                        .HasForeignKey("ExaminationSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSupportToolAPI.Domain.ExaminationTicket", "ExaminationTicket")
                        .WithMany()
                        .HasForeignKey("ExaminationTicketId");

                    b.HasOne("ExamSupportToolAPI.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("ExaminationTicket");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.ExaminationSession", b =>
                {
                    b.Navigation("ExaminationTickets");

                    b.Navigation("StudentPresentations");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.PresentationSchedule", b =>
                {
                    b.Navigation("PresentationScheduleEntries");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.SecretaryMember", b =>
                {
                    b.Navigation("ExaminationSessions");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.Student", b =>
                {
                    b.Navigation("PresentationScheduleEntries");
                });

            modelBuilder.Entity("ExamSupportToolAPI.Domain.StudentPresentation", b =>
                {
                    b.Navigation("CommitteeMemberGrades");
                });
#pragma warning restore 612, 618
        }
    }
}
